name: Release binaries

on:
  release:
    types: [published]

permissions:
  contents: write

env:
  CLANG_VERSION: "16"

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
            node-version: '20'

      - name: Install LLVM/Clang ${{ env.CLANG_VERSION }} (apt.llvm.org)
        run: |
            set -eux
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh ${CLANG_VERSION}
            sudo apt-get install -y \
                llvm-${CLANG_VERSION}-dev \
                libclang-${CLANG_VERSION}-dev \
                cmake ninja-build \
                zlib1g-dev libedit-dev libzstd-dev libpolly-${CLANG_VERSION}-dev

      - name: Toolchain diagnostics
        run: |
          set -eux
          node -v
          cmake --version
          ninja --version
          clang-${CLANG_VERSION} --version || true

      - name: Configure (CMake)
        run: |
            cmake -S . -B build \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_DIR=/usr/lib/llvm-${CLANG_VERSION}/lib/cmake/llvm \
                -DClang_DIR=/usr/lib/cmake/clang-${CLANG_VERSION}

      - name: Build
        run: |
            cmake --build build --config Release --target all --verbose

      - name: Package artifact
        run: |
            set -eux
            mv build/tool ./clang-dumper-linux-x86_64-standalone
            mv build/libplugin.so ./clang-dumper-linux-x86_64-plugin.so
            tar -czf clang-dumper-linux-x86_64-standalone.tar.gz clang-dumper-linux-x86_64-standalone
            tar -czf clang-dumper-linux-x86_64-plugin.tar.gz clang-dumper-linux-x86_64-plugin.so

      - name: Upload asset to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
              clang-dumper-linux-x86_64-standalone.tar.gz
              clang-dumper-linux-x86_64-plugin.tar.gz

  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      # Minimal, clean MSYS2 environment with only what we truly need.
      - name: Set up MSYS2 (MinGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            cmake
            ninja
            zip
            mingw-w64-x86_64-llvm
            mingw-w64-x86_64-llvm-libs
            mingw-w64-x86_64-clang-libs
            mingw-w64-x86_64-llvm-libs
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-clang-tools-extra
            mingw-w64-x86_64-nodejs
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-zstd

      - name: Toolchain diagnostics
        shell: msys2 {0}
        run: |
          set -eux
          clang --version
          llvm-config --version || true
          node -v
          cmake --version
          ninja --version

      - name: Configure (CMake)
        shell: msys2 {0}
        run: |
          # Prefer /mingw64 packages over /usr (avoid pulling msys LLVM 16 w/out zlib headers)
          export PATH="/mingw64/bin:$PATH"
          export CMAKE_PREFIX_PATH="/mingw64${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}"
          # Zlib hints (FindZLIB fails otherwise because only mingw variant installed)
          export ZLIB_INCLUDE_DIR=/mingw64/include
          export ZLIB_LIBRARY=/mingw64/lib/libz.dll.a
          export LLVM_CONFIG_EXECUTABLE=/mingw64/bin/llvm-config
          # Ensure Clang/GCC headers are visible to standalone clang++ preprocessing
          # (required by the Node enum generator which runs clang++ -E)
          export C_INCLUDE_PATH="/mingw64/include:/mingw64/lib/gcc/x86_64-w64-mingw32/15.2.0/include"
          export CPLUS_INCLUDE_PATH="/mingw64/include/c++/15.2.0:/mingw64/include"
          export CPATH="$C_INCLUDE_PATH:$CPLUS_INCLUDE_PATH"
          test -x "$LLVM_CONFIG_EXECUTABLE"
          test -f "$ZLIB_INCLUDE_DIR/zlib.h"
          test -f "$ZLIB_LIBRARY"
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLVM_CONFIG_EXECUTABLE="$LLVM_CONFIG_EXECUTABLE" \
            -DLLVM_DIR=/mingw64/lib/cmake/llvm \
            -DClang_DIR=/mingw64/lib/cmake/clang \
            -DZLIB_INCLUDE_DIR=$ZLIB_INCLUDE_DIR \
            -DZLIB_LIBRARY=$ZLIB_LIBRARY \
            -DCMAKE_PREFIX_PATH="/mingw64/lib/cmake${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}"

      - name: Build
        shell: msys2 {0}
        run: |
          set -eux
          cmake --build build --config Release --target tool --verbose

      - name: Package artifact
        shell: msys2 {0}
        run: |
          set -eux
          cd build
          test -f tool.exe
          mv tool.exe clang-dumper-windows-x86_64-standalone.exe
          zip -9 ../clang-dumper-windows-x86_64-standalone.zip clang-dumper-windows-x86_64-standalone.exe

      - name: Upload asset to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            clang-dumper-windows-x86_64-standalone.zip

  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install LLVM/Clang ${{ env.CLANG_VERSION }} (brew)
        run: |
          set -eux
          brew update
          brew install llvm@${CLANG_VERSION} ninja zstd libedit libomp pkg-config
          LLVM_PREFIX=$(brew --prefix llvm@${CLANG_VERSION})
          echo "LLVM_PREFIX=${LLVM_PREFIX}" >> "$GITHUB_ENV"
          echo "PATH=${LLVM_PREFIX}/bin:${PATH}" >> "$GITHUB_ENV"

      - name: Toolchain diagnostics
        run: |
          set -eux
          node -v
          cmake --version
          ninja --version
          "${LLVM_PREFIX}/bin/clang" --version
          clang --version || true

      - name: Configure (CMake)
        run: |
          cmake -S . -B build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="${LLVM_PREFIX}/bin/clang" \
              -DCMAKE_CXX_COMPILER="${LLVM_PREFIX}/bin/clang++" \
              -DLLVM_DIR="${LLVM_PREFIX}/lib/cmake/llvm" \
              -DClang_DIR="${LLVM_PREFIX}/lib/cmake/clang"

      - name: Build
        run: cmake --build build --config Release --target tool --verbose

      - name: Package artifact
        run: |
          set -eux
          cp build/tool ./clang-dumper-macos-arm64-standalone
          tar -czf clang-dumper-macos-arm64-standalone.tar.gz clang-dumper-macos-arm64-standalone

      - name: Upload asset to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            clang-dumper-macos-arm64-standalone.tar.gz

  finalize:
    name: Finalize or cancel release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: ${{ always() }}
    steps:
      - name: Cancel (delete) the release on failure
        if: ${{ needs.build-linux.result != 'success' || needs.build-windows.result != 'success' || needs.build-macos.result != 'success' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          set -eux
          sudo apt-get update && sudo apt-get install -y jq
          api="https://api.github.com/repos/${GITHUB_REPOSITORY}"
          rel_json=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "${api}/releases/tags/${TAG_NAME}")
          id=$(echo "$rel_json" | jq -r '.id')
          echo "Deleting release ${TAG_NAME} (id=${id}) due to failed build(s)."
          curl -sS -X DELETE -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "${api}/releases/${id}"
          echo "Release deleted."
      - name: Success note
        if: ${{ needs.build-linux.result == 'success' && needs.build-windows.result == 'success' && needs.build-macos.result == 'success' }}
        run: echo "All builds succeeded and assets are attached to the release."
